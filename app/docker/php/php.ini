apc.enable_cli = 1
date.timezone = ${PHP_DATE_TIMEZONE}
session.auto_start = Off
short_open_tag = Off

realpath_cache_size = 4096K
realpath_cache_ttl = 600

post_max_size = 6M
upload_max_filesize = 5M

memory_limit = 256M

; configuration for php opcache module
; priority=10
; It is loaded there: docker-php-ext-opcache.ini
;zend_extension=opcache.so

; Determines if Zend OPCache is enabled
opcache.enable=1

; Sets how much memory to use
opcache.memory_consumption=128

; Sets how much memory should be used by OPcache for storing internal strings
; (e.g. classnames and the files they are contained in)
opcache.interned_strings_buffer=32

; The maximum number of files OPcache will cache
opcache.max_accelerated_files=20000

; The maximum percentage of "wasted" memory until a restart is scheduled.
opcache.max_wasted_percentage=15

; When disabled, you must reset the OPcache manually or restart the
; webserver for changes to the filesystem to take effect.
; For Development / testing, keep 1
; For performance / production, keep 0
opcache.validate_timestamps=${OPCACHE_VALIDATE_TIMESTAMPS}

; How often (in seconds) to check file timestamps for changes to the shared
; memory storage allocation.
; Note: you need to restart the PHP process to clear the cache!
opcache.revalidate_freq=0

; Prevents caching files that are less than this number of seconds old.
; It protects from caching of incompletely updated files. In case all file
; updates on your site are atomic, you may increase performance setting it
; to "0".
; (default "2")
opcache.file_update_protection=0

; Enables the OPcache for the CLI version of PHP.
opcache.enable_cli=1

; If you use any library or code that uses code annotations you must enable save comments:
opcache.load_comments=1
opcache.save_comments=1

; If enabled, a fast shutdown sequence is used for the accelerated code
; The fast shutdown sequence doesn't free each allocated block, but lets
; the Zend Engine Memory Manager do the work.
opcache.fast_shutdown=1
